//请求库(requests)
import inet.url;
import web.json;
import inet.http;
namespace kirequests;


var UserAgent = "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36 Edg/120.0.0.0";
var defaultTimeout = 5;
disableCookies = false;

// 测试不支持代理的验证(包含用户名密码的代理)
var parseProxy = function(proxy){
	if(!proxy) return {proxy=false};
	var protocol, proxy = ..table.unpack(..string.split(proxy,'<://>'))
	if(protocol == "socks5") protocol = "socks";
	var tmp = ..string.split(proxy,'<@>');
	var host_port = #tmp == 1 ? tmp[1] : tmp[2];
	var user_pass = #tmp == 1 ? null : tmp[1];
	var host, port = ..table.unpack(..string.split(host_port,':'));
	var user, pass;
	if(user_pass){
		user, pass = ..table.unpack(..string.split(user_pass,':'));
	}
	var proxies = {
		proxy=..string.format("%s=%s:%s", protocol, host, port);
		user=user;
		pass=pass
	};
	return proxies;
}

var parseHeaders = function(headerStr){
	if(!headerStr) return null;
	var headerTable = ..string.split(headerStr,'<\r\n>');
	var headers = {};
	for(i=1;#headerTable;1){
		var h = headerTable[i];
		var tmp = ..string.split(h,':',2);
		if(#tmp<2) continue;
		headers[tmp[1]] = ..string.trim(tmp[2]);
	}
	return headers;
}

request = function(method,url,params,postdata,headers,timeout,proxy,json){
	if(params) url = url + "?" + ..inet.url.stringifyParameters(params);
	if(json) postdata = ..web.json.stringify(json);
	var proxies = parseProxy(proxy);
	var http = ..inet.http(UserAgent,proxies.proxy); 
	http.disableCache();
	if(disableCookies) http.disableCookies();
	if(!timeout) timeout=defaultTimeout;
	timeout = timeout * 1000;
	http.setTimeouts(timeout,timeout,timeout);
	
	if(proxies.user && proxies.pass){
		http.setProxyAuth(proxies.user, proxies.pass);
	}
	
	var responseHeaders;
	http.afterSend = function(statusCode,contentLength){
    	responseHeaders = http.readHeader();
	}
	var text = http.down(url,postdata,headers,,,method);
	if(!text) return null;
	var response = {
		text=text;
		status=http.statusCode;
		headers=parseHeaders(responseHeaders);
		json=function(){
			return ..web.json.tryParse(text);
		};
	}
	http.close();
	return response;
}

get = function(url,params,headers,timeout,proxy){
	return request("GET",url,params,,headers,timeout,proxy);
}

post = function(url,params,postdata,headers,timeout,proxy,json){
	headers = ..web.joinHeaders(headers);
	if( type(postdata) == type.table ){
		postdata = ..inet.url.stringifyParameters(postdata);
	}
	return request("POST",url,params,postdata,headers,timeout,proxy,json);
}

head = function(url,params,headers,timeout,proxy){
	return request("HEAD",url,params,,headers,timeout,proxy);
}


/**intellisense()
kirequests.get(.(url,params,headers,timeout,proxy) = 
kirequests.post(.(url,params,postdata,headers,timeout,proxy,json) = 
kirequests.head(.(url,params,headers,timeout,proxy) = 
end intellisense**/