import util.metaProperty;
import hpsocket.listen;
namespace hpsocket.listen;
	
class httpServer{
	ctor( pListener,className ){
		this = ..hpsocket.listen(pListener,className);
		//::HPSocket.HP_Set_FN_HttpServer_OnWorkerThreadEnd(this.pListener,..thread.callbackUninitialize );
	};
	@_metaProperty;
}

namespace httpServer{
	_metaProperty = ..util.metaProperty(
	
		onPrepareListen = {
			_set = function( callback ){
				owner.OnPrepareListenCallback = owner.createThreadCallback(callback,"int(ptr pSender,addr soListen)");
				::HPSocket.HP_Set_FN_HttpServer_OnPrepareListen(owner.pListener,owner.OnPrepareListenCallback );
			} 	
		};
		onAccept = {
			_set = function( callback ){
				owner.OnAcceptCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId, ADDR client)");
				::HPSocket.HP_Set_FN_HttpServer_OnAccept(owner.pListener,owner.OnAcceptCallback );
			} 	
		}
		onHandShake = {
			_set = function( callback ){
				owner.OnHandShakeCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
				::HPSocket.HP_Set_FN_HttpServer_OnHandShake(owner.pListener,owner.OnHandShakeCallback );
			} 	
		};
		onSend = {
			_set = function( callback ){
				owner.OnSendCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,pointer pData, int length)");
				::HPSocket.HP_Set_FN_HttpServer_OnSend(owner.pListener,owner.OnSendCallback );
			} 	
		};
		onClose = {
			_set = function( callback ){
				owner.OnCloseCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId, int enOperation, int iErrorCode)");
				::HPSocket.HP_Set_FN_HttpServer_OnClose(owner.pListener,owner.OnCloseCallback );
			} 	
		};
		onShutdown = {
			_set = function( callback ){
				owner.OnShutdownCallback = owner.createThreadCallback(callback,"int(ptr pSender)");
				::HPSocket.HP_Set_FN_HttpServer_OnShutdown(owner.pListener,owner.OnShutdownCallback );
			} 	
		};
		onReceive = {
			_set = function( callback ){
				owner.OnReceiveCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,pointer pData, int length)");
				::HPSocket.HP_Set_FN_HttpServer_OnReceive(owner.pListener,owner.OnReceiveCallback );
			} 	
		};
		onMessageBegin = {
			_set = function( callback ){
				owner.OnMessageBeginCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
				::HPSocket.HP_Set_FN_HttpServer_OnMessageBegin(owner.pListener,owner.OnMessageBeginCallback ) 
			} 	
		};
		onRequestLine = {
			_set = function( callback ){
				owner.OnRequestLineCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,string method,string url)");
				::HPSocket.HP_Set_FN_HttpServer_OnRequestLine(owner.pListener,owner.OnRequestLineCallback ) 
			} 	
		};
		onHeader = {
			_set = function( callback ){
				owner.OnHeaderCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,string name,string value)");
				::HPSocket.HP_Set_FN_HttpServer_OnHeader(owner.pListener,owner.OnHeaderCallback ) 
			} 	
		};
		onHeadersComplete = {
			_set = function( callback ){
				owner.OnHeadersCompleteCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
				::HPSocket.HP_Set_FN_HttpServer_OnHeadersComplete(owner.pListener,owner.OnHeadersCompleteCallback ) 
			} 	
		};
		onBody = {
			_set = function( callback ){
				owner.OnBodyCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,ptr pData, int len)");
				::HPSocket.HP_Set_FN_HttpServer_OnBody(owner.pListener,owner.OnBodyCallback ) 
			} 	
		};
		onChunkHeader = {
			_set = function( callback ){
				owner.OnChunkHeaderCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,int len)");
				::HPSocket.HP_Set_FN_HttpServer_OnChunkHeader(owner.pListener,owner.OnChunkHeaderCallback ) 
			} 	
		};
		onChunkComplete = {
			_set = function( callback ){
				owner.OnChunkCompleteCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
				::HPSocket.HP_Set_FN_HttpServer_OnChunkComplete(owner.pListener,owner.OnChunkCompleteCallback ) 
			} 	
		};
		onMessageComplete = {
			_set = function( callback ){
				owner.OnMessageCompleteCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
				::HPSocket.HP_Set_FN_HttpServer_OnMessageComplete(owner.pListener,owner.OnMessageCompleteCallback ) 
			} 	
		};
		onUpgrade = {
			_set = function( callback ){
				owner.OnUpgradeCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,int upgradeType)");
				::HPSocket.HP_Set_FN_HttpServer_OnUpgrade(owner.pListener,owner.OnUpgradeCallback ) 
			} 	
		};
		onParseError = {
			_set = function( callback ){
				owner.OnParseErrorCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId, int errorCode,string errorDesc)");
				::HPSocket.HP_Set_FN_HttpServer_OnParseError(owner.pListener,owner.OnParseErrorCallback ) 
			} 	
		};
		onWsMessageHeader = {
			_set = function( callback ){
				owner.OnWsMessageHeaderCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,bool final,BYTE reserved,BYTE operationCode,INT mask,long bodyLen)");
				::HPSocket.HP_Set_FN_HttpServer_OnWSMessageHeader(owner.pListener,owner.OnWsMessageHeaderCallback ) 
			} 	
		};
		onWsMessageBody = {
			_set = function( callback ){
				owner.OnWsMessageBodyCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId,ptr pData,int len)");
				::HPSocket.HP_Set_FN_HttpServer_OnWSMessageBody(owner.pListener,owner.OnWsMessageBodyCallback ) 
			} 	
		};
		onWsMessageComplete = {
			_set = function( callback ){
				owner.OnWsMessageCompleteCallback = owner.createThreadCallback(callback,"int(ptr pSender,ADDR connId)");
				::HPSocket.HP_Set_FN_HttpServer_OnWSMessageComplete(owner.pListener,owner.OnWsMessageCompleteCallback ) 
			} 	
		};
		sendPolicy = {
			_get = function(){
				var s = {INT value} 
				if(::HPSocket.HP_Server_GetSendPolicy(owner.pSocket,s))
					return s.value;;
			} 
			_set = function( value ){
				::HPSocket.HP_Server_SetSendPolicy(owner.pSocket,value)
			} 	
		};
		freeSocketObjLockTime = {
			_get = function(){
				var s = {INT value} 
				if(::HPSocket.HP_Server_GetFreeSocketObjLockTime(owner.pSocket,s))
					return s.value;;
			} 
			_set = function( value ){
				::HPSocket.HP_Server_SetFreeSocketObjLockTime(owner.pSocket,value)
			} 	
		};
		freeBufferObjPool = {
			_get = function(){
				var s = {INT value} 
				if(::HPSocket.HP_Server_GetFreeBufferObjPool(owner.pSocket,s))
					return s.value;;
			} 
			_set = function( value ){
				::HPSocket.HP_Server_SetFreeBufferObjPool(owner.pSocket,value)
			} 	
		};
		freeBufferObjHold = {
			_get = function(){
				var s = {INT value} 
				if(::HPSocket.HP_Server_GetFreeBufferObjHold(owner.pSocket,s))
					return s.value;;
			} 
			_set = function( value ){
				::HPSocket.HP_Server_SetFreeBufferObjHold(owner.pSocket,value)
			} 	
		};
		freeSocketObjPool  = {
			_get = function(){
				var s = {INT value} 
				if(::HPSocket.HP_Server_GetFreeSocketObjPool(owner.pSocket,s))
					return s.value;;
			} 
			_set = function( value ){
				::HPSocket.HP_Server_SetFreeSocketObjPool(owner.pSocket,value)
			} 	
		};
		freeSocketObjHold  = {
			_get = function(){
				var s = {INT value} 
				if(::HPSocket.HP_Server_GetFreeSocketObjHold(owner.pSocket,s))
					return s.value;;
			} 
			_set = function( value ){
				::HPSocket.HP_Server_SetFreeSocketObjHold(owner.pSocket,value)
			} 	
		};
		maxConnectionCount  = {
			_get = function(){
				var s = {INT value} 
				if(::HPSocket.HP_Server_GetMaxConnectionCount(owner.pSocket,s))
					return s.value;;
			} 
			_set = function( value ){
				::HPSocket.HP_Server_SetMaxConnectionCount(owner.pSocket,value)
			} 	
		};
		workerThreadCount  = {
			_get = function(){
				var s = {INT value} 
				if(::HPSocket.HP_Server_GetWorkerThreadCount(owner.pSocket,s))
					return s.value;;
			} 
			_set = function( value ){
				::HPSocket.HP_Server_SetWorkerThreadCount(owner.pSocket,value)
			} 	
		};
		markSilence  = {
			_get = function(){
				return !!::HPSocket.HP_Server_IsMarkSilence(owner.pSocket)
			} 
			_set = function( value ){
				::HPSocket.HP_Server_SetMarkSilence(owner.pSocket,value)
			} 	
		};
		_topointer = function(){
			return owner.pSocket;
		};
		_serialize = function(kernelCall){
			return ..string.format("global.import('hpsocket.%s') : hpsocket.%s( topointer(0x%x))",owner.className,owner.className,tonumber(owner.pSocket) );;
		}
	)
}


