namespace hpsocket.socket;

class client{
	ctor( obj ){ 
		this = obj;	
	};
	lasterr = function(){
		var err = ::HPSocket.HP_Client_GetLastError(this.pSocket);
		var desc = topointer(::HPSocket.HP_Client_GetLastErrorDesc(this.pSocket));
		if(desc) desc = ..raw.str(desc,true);
		return err,desc;
	}
	start = function(ip,port,bAsyncConnect){
		if(ip=="localhost") ip="127.0.0.1";
		return !!::HPSocket.HP_Client_StartW(this.pSocket,ip,port,bAsyncConnect===null? true :bAsyncConnect)
	}
	startWithBindAddress = function(ip,port,bAsyncConnect,bindAddress){
		return ::HPSocket.HP_Client_StartWithBindAddressW(this.pSocket,ip,port,bAsyncConnect===null? true :bAsyncConnect,bindAddress)
	}
	stop = function(){
		return ::HPSocket.HP_Client_Stop(this.pSocket)
	}
	send = function(buffer,length){
		return ::HPSocket.HP_Client_Send(this.pSocket,buffer,length===null?#buffer:length )
	}
	sendPart = function(buffer,length,offset){
		return ::HPSocket.HP_Client_SendPart(this.pSocket,buffer,length===null?#buffer:length,offset:0 )
	}
	hasStarted = function(){
		return !!::HPSocket.HP_Client_HasStarted(this.pSocket)
	}
	getState = function(){
		return ::HPSocket.HP_Client_GetState(this.pSocket)
	}
	getConnectionId = function(){
		return ::HPSocket.HP_Client_GetConnectionID(this.pSocket)
	}
	setExtra = function(pExtra){
		return ::HPSocket.HP_Client_SetExtra(this.pSocket,pExtra );
	}
 	getExtra = function(){
		return topointer( ::HPSocket.HP_Client_GetExtra(this.pSocket) );
	}
	reallocString = function(size){
		var pExtra = owner.getExtra();
		owner.setExtra(..raw.realloc(size>0?size:0,pExtra,""));
	}
	appendString = function(pData,len){
		var pExtra = owner.getExtra();
		if(pExtra)owner.setExtra(..raw.concat(pExtra,pData,len) );  
	}
	getString = function(){
		var pExtra = owner.getExtra();
		if(pExtra) {
			var size = ..raw.sizeof(pExtra);
			if( size ) return ..raw.tostring(pExtra,1,size );
		}
	}
	getLocalAddress = function(){
		var addr ={ WORD value[60]}
		var addrlen = {int value=60}
		var port = {WORD value}
		if(::HPSocket.HP_Client_GetLocalAddress(this.pSocket,addr,addrlen,port))
			return addr.value,port.value;
	}
	getRemoteHost = function(){
		var addr ={ WORD value[60]}
		var addrlen = {int value=60}
		var port = {WORD value}
		if(::HPSocket.HP_Client_GetRemoteHost(this.pSocket,addr,addrlen,port))
			return addr.value,port.value;
	}
	getPendingDataLength = function(){ 
		var pending = {int value} 
		if(::HPSocket.HP_Client_GetPendingDataLength(this.pSocket,pending))
			return pending.value;
	}
	sslSetupContext = function(mode,certFile,keyFile,password,ca){
		return !!::HPSocket.HP_SSLClient_SetupSSLContextW(owner.pSocket,mode,certFile,keyFile,password,ca);
	}
	sslCleanup = function(){
		return !!::HPSocket.HP_SSLClient_CleanupSSLContext(owner.pSocket);
	}
 }
       
