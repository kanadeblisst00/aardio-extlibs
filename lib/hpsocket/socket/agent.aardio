namespace hpsocket.socket;

class agent{
	ctor( obj ){ 
		this = obj;	
	};
	lasterr = function(){
		var err = ::HPSocket.HP_Agent_GetLastError(this.pSocket);
		var desc = topointer(::HPSocket.HP_Agent_GetLastErrorDesc(this.pSocket));
		if(desc) desc = ..raw.str(desc,true);
		return err,desc;
	}
	start = function(ip,bAsyncConnect){
		return ::HPSocket.HP_Agent_StartW(this.pSocket,ip,bAsyncConnect===null? true :bAsyncConnect)
	}
	stop = function(){
		return ::HPSocket.HP_Agent_Stop(this.pSocket)
	}
	connect = function(ip,port){
		var connId = {ADDR value}
		if( ::HPSocket.HP_Agent_ConnectW(this.pSocket,ip,port,connId) )
			return connId.value;
	}
	disconnect = function(connId,force){
		return ::HPSocket.HP_Agent_Disconnect(this.pSocket,connId,force )
	}
	disconnectLongConnections = function(period,force){
		return ::HPSocket.HP_Agent_DisconnectLongConnections(this.pSocket,period,force )
	}
	disconnectSilenceConnections = function(period,force){
		return ::HPSocket.HP_Agent_DisconnectSilenceConnections(this.pSocket,period,force )
	}
	send = function(connId,buffer,length){
		return ::HPSocket.HP_Agent_Send(this.pSocket,connId,buffer,length===null?#buffer:length )
	}
	sendPart = function(connId,buffer,length,offset){
		return ::HPSocket.HP_Agent_SendPart(this.pSocket,connId,buffer,length===null?#buffer:length,offset:0 )
	}
	setConnectionExtra = function(connId,pExtra){
		return ::HPSocket.HP_Agent_SetConnectionExtra(this.pSocket,connId,pExtra );//考虑多线程释放内存问题
	}
 	getConnectionExtra = function(connId){
 		var extra = {ptr value}
		::HPSocket.HP_Agent_GetConnectionExtra(this.pSocket,connId,extra );
		return extra.value;
	} 
	reallocString = function(connId,size){
		var pExtra = owner.getConnectionExtra(connId);
		owner.setConnectionExtra(connId,..raw.realloc(size>0?size:0,pExtra,""));
	}
	appendString = function(connId,pData,len){
		var pExtra = owner.getConnectionExtra(connId);
		if(pExtra)owner.setConnectionExtra(connId,..raw.concat(pExtra,pData,len) );  
	}
	getString = function(connId){
		var pExtra = owner.getConnectionExtra(connId);
		if(pExtra) {
			var size = ..raw.sizeof(pExtra);
			if( size ) return ..raw.tostring(pExtra,1,size );
		}
	}
	hasStarted = function(){
		return !!::HPSocket.HP_Agent_HasStarted(this.pSocket)
	}
	getState = function(){
		return ::HPSocket.HP_Agent_GetState(this.pSocket)
	}
	getConnectionCount = function(){
		return ::HPSocket.HP_Agent_GetConnectionCount(this.pSocket)
	}
	getAllConnectionIds = function(){
		var ids ={ADDR value[] = {INT length}}
		if(::HPSocket.HP_Agent_GetAllConnectionIDs(this.pSocket,ids.value)){
			if(::HPSocket.HP_Agent_GetAllConnectionIDs(this.pSocket,ids,ids.value))
				return ids.value;
		}
	}
	getLocalAddress = function(connId){
		var addr ={ WORD value[60]}
		var addrlen = {int value=60}
		var port = {WORD value}
		if(::HPSocket.HP_Agent_GetLocalAddress(this.pSocket,connId,addr,addrlen,port))
			return addr.value,port.value;
	}
	getRemoteHost = function(connId){
		var addr ={ WORD value[60]}
		var addrlen = {int value=60}
		var port = {WORD value}
		if(::HPSocket.HP_Agent_GetRemoteHost(this.pSocket,connId,addr,addrlen,port))
			return addr.value,port.value;
	}
	getConnectPeriod = function(connId){
		var s = {INT value} 
		if(::HPSocket.HP_Agent_GetConnectPeriod(owner.pSocket,connId,s))
			return s.value;;
	}
	getSilencePeriod = function(connId){
		var s = {INT value} 
		if(::HPSocket.HP_Agent_GetSilencePeriod(owner.pSocket,connId,s))
			return s.value;;
	}
	getPendingDataLength = function(connId){
		var s = {int value} 
		if(::HPSocket.HP_Agent_GetPendingDataLength(owner.pSocket,connId,s))
			return s.value;; 
	}
	sslSetupContext = function(mode,certFile,keyFile,password,ca){
		return !!::HPSocket.HP_SSLAgent_SetupSSLContextW(owner.pSocket,mode,certFile,keyFile,password,ca);
	}
	sslCleanup = function(){
		return !!::HPSocket.HP_SSLAgent_CleanupSSLContext(owner.pSocket);
	}
 }
       
