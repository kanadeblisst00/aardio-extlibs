import hpsocket.helper.headers;
import hpsocket.socket.tcpClient;
import hpsocket.helper.websocket;

namespace hpsocket.socket;

class httpClient{
	ctor( obj ){ 
		this = ..hpsocket.socket.tcpClient(obj);
	};
	sendRequest = function(body,path,headers,method){
		headers = ..hpsocket.helper.headers(headers)
		return 	!!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,method:"GET",path,headers.struct(),headers.length(),body,#body);
	}
	sendGet = function(path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	!!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"GET",path,headers.struct(),headers.length(),body,#body);
	}
	sendPost = function(body,path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"POST",path,headers.struct(),headers.length(),body,#body);
	}	
	sendPut = function(body,path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	!!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"PUT",path,headers.struct(),headers.length(),body,#body);
	}
	sendPatch = function(body,path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	!!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"PATCH",path,headers.struct(),headers.length(),body,#body);
	} 
	sendDelete = function(body,path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	!!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"DELETE",path,headers.struct(),headers.length(),body,#body);
	} 
	sendHead = function(body,path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	!!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"HEAD",path,headers.struct(),headers.length(),body,#body);
	} 
	sendTrace = function(body,path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	!!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"TRACE",path,headers.struct(),headers.length(),body,#body);
	} 
	sendOptions = function(body,path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	!!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"OPTIONS",path,headers.struct(),headers.length(),body,#body);
	} 
	sendConnect = function(body,path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	!!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"CONNECT",path,headers.struct(),headers.length(),body,#body);
	}
	sendLocalFile = function(filename,method,path,headers){
		headers = ..hpsocket.helper.headers(headers)
		return 	::HPSocket.HP_HttpClient_SendLocalFile(this.pSocket,..io.fullpath(filename),method,path,headers.struct(),headers.length());
	}
	sendWsUpgradeRequest = function(path,headers){
		headers = ..hpsocket.helper.headers(headers);
		
		var key = wsHelper.getSecKey();
		headers.mix(
			["Upgrade"] = "websocket";
			["Connection"] = "Upgrade";
			["Host"] = owner.getUrlHost(); 
			["Sec-WebSocket-Origin"] =  owner.getUrl(path);
			["Sec-WebSocket-Version"] = "13";
			["Sec-WebSocket-Protocol"]  = "chat";
			["Sec-WebSocket-Key"] = key; 
		)
		if( !!::HPSocket.HP_HttpClient_SendRequest(this.pSocket,"GET",path,headers.struct(),headers.length(), ,0) ){
			owner.reallocString(#key);
			owner.appendString(key,#key)
		}
	}
	checkWsUpgradeResponse = function(path,headers){
		var acceptKey = owner.getHeader("Sec-WebSocket-Accept")
		var requestKey = owner.getString(); 
		owner.reallocString(0);
		if( wsHelper.getSecAccept(requestKey) == acceptKey ) return true;
	}
	getUrlHost = function(path,scheme){
		var ip,port = owner.getRemoteHost();
		if(!(ip&&port) )return;
		if(ip=="0.0.0.0")ip = "localhost";
		return  ..string.format("%s:%d",ip,port ); 
	}
	getUrl = function(path,scheme){
		var host = owner.getUrlHost();
		if(!host) return;
		var url =  ..string.format("%s://%s",scheme:"http",host ); 
		if(path){
			path = ..string.replace(path,"\\","/");
			if(path[1]!='/'#) path= "/" + path;
			return url + path;
		}
		return url;
	}
	getWsUrl = function(path){
		return owner.getUrl(path,"ws");
	}
	sendWsMessage = function(data,opCode,final,mask,bodyLen,reserved){
    	if(final===null) final = true;
    	if(opCode===null) opCode = 1;
	
    	var len;
    	if( data[["_struct"]] ){
        	len = ..raw.sizeof(data) 
    	}
    	else { 
        	len = #data;
        	
    	}
    	var pData = realloc(len,,data); 
    	
    	var r = !!::HPSocket.HP_HttpClient_SendWSMessage(this.pSocket,final,reserved
        	,opCode,mask : '\x01\x02\x03\x04',pData, len, ..math.size64(len+(bodyLen:0)) );
    	realloc(0,pData);
    	return r;
	};
	getContentEncoding = function(enField){
		var s = ::HPSocket.HP_HttpClient_GetContentEncoding(this.pSocket,enField);
		if(s) return ..raw.str((topointer(s)));
	}
	getTransferEncoding = function(enField){
		var s = ::HPSocket.HP_HttpClient_GetTransferEncoding(this.pSocket,enField);
		if(s) return ..raw.str((topointer(s)));
	}
	getContentType = function(){
		var s = ::HPSocket.HP_HttpClient_GetContentType(this.pSocket);
		if(s) return ..raw.str((topointer(s)));
	}
	getContentLength = function(){
		return ::HPSocket.HP_HttpClient_GetContentLength(this.pSocket);
	}
	setLocalVersion = function(v){
		::HPSocket.HP_HttpClient_SetLocalVersion(this.pSocket,v);
	}
	getLocalVersion = function(){
		return ::HPSocket.HP_HttpClient_GetLocalVersion(this.pSocket);
	}
	getVersion = function(){
		return 0xFFFF & ::HPSocket.HP_HttpClient_GetVersion(this.pSocket);
	}
	isKeepAlive = function(){
		return !! ::HPSocket.HP_HttpClient_IsKeepAlive(this.pSocket);
	} 
	isUpgrade = function(){
		return !! ::HPSocket.HP_HttpClient_IsUpgrade(this.pSocket);
	}
	getParseErrorCode = function(){
		var errdesc= {string value};
		var errno = 0xFFFF & ::HPSocket.HP_HttpClient_GetParseErrorCode(this.pSocket,errdesc);
		return errno,errdesc.value;
	}
	getStatusCode = function(){
		return 0xFFFF & ::HPSocket.HP_HttpClient_GetStatusCode(this.pSocket);
	}
	getHeader = function(name){
		var s = {string value};
		if(::HPSocket.HP_HttpClient_GetHeader(this.pSocket,name,s))
			return s.value;
	}
	getHeaders = function(name){
		var s = {string array[] = {INT length} };
		if(::HPSocket.HP_HttpClient_GetHeaders(this.pSocket,null,s.array))
			if(::HPSocket.HP_HttpClient_GetHeaders(this.pSocket,,name,s,s.array)) return s.array;
	}
	getAllHeaders = function(){
		var hdrs = ..hpsocket.helper.headers(); 
		::HPSocket.HP_HttpClient_GetAllHeaders(this.pSocket,null,hdrs.array);
		if(::HPSocket.HP_HttpClient_GetAllHeaders(this.pSocket,hdrs.struct(),hdrs.array)) return hdrs;
	}
	getAllHeaderNames = function(){
		var s = {string array[] = {INT length} };
		if(::HPSocket.HP_HttpClient_GetAllHeaderNames(this.pSocket,null,s.array))
			if(::HPSocket.HP_HttpClient_GetAllHeaderNames(this.pSocket,s,s.array)) return s.array;
	}
	getCookie = function(name){
		var s = {string value};
		if(::HPSocket.HP_HttpClient_GetCookie(this.pSocket,name,s))
			return s.value;
	}
	getAllCookies = function(){
		var s = {struct array[] = {{string name;string value};INT length} };
		if(::HPSocket.HP_HttpClient_GetAllCookies(this.pSocket,null,s.array))
			if(::HPSocket.HP_HttpClient_GetAllCookies(this.pSocket,s,s.array)) return s.array;
	}
	addCookie = function(name,value,relpace){
		return !!::HPSocket.HP_HttpClient_AddCookie(this.pSocket,name,value,relpace)
	}
	deleteCookie = function(name){
		return !!::HPSocket.HP_HttpClient_DeleteCookie(this.pSocket,name)
	}
	deleteAllCookies = function(){
		return !!::HPSocket.HP_HttpClient_DeleteAllCookies(this.pSocket)
	}
	getUpgradeType = function(){
		return  ::HPSocket.HP_HttpClient_GetUpgradeType(this.pSocket);
	}
	getWsMessageState = function(final,reserved,operationCode,mask,data,bodyLen){
		var final = {bool value}
		var reserved = {BYTE value}
		var operationCode = {BYTE value}
		var mask = {INT value}
		var bodyLen = {LONG value}
		var bodyRemain = {LONG value} 
		if( ::HPSocket.HP_HttpClient_GetWSMessageState(this.pSocket,final,reserved
			,operationCode,mask,bodyLen,bodyRemain ) ){
				return{
					final = final;
					reserved = reserved;
					operationCode = operationCode;
					mask = mask;
					bodyLen = bodyLen;
					bodyRemain = bodyRemain
				}
			}
	};
}
  
namespace httpClient{
	wsHelper =  ..hpsocket.helper.websocket;
	realloc = ..raw.realloc;
}
