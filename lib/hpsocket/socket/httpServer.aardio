
import hpsocket.helper.headers;
import hpsocket.socket.tcpServer;
import hpsocket.helper.websocket;

namespace hpsocket.socket;

class httpServer{
	ctor( obj ){ 
		this = ..hpsocket.socket.tcpServer(obj);
	};
	getUrl = function(path,scheme){
		var ip,port = owner.getListenAddress();
		if(!(ip&&port) )return;
		if(ip=="0.0.0.0")ip = "localhost";
		var url =  ..string.format("%s://%s:%d",scheme:"http",ip,port ); 
		if(path){
			path = ..string.replace(path,"\\","/");
			if(path[1]!='/'#) path= "/" + path;
			return url + path;
		}
		return url;
	}
	getWsUrl = function(path){
		return owner.getUrl(path,"ws");
	}
	sendResponse = function(connId,body,headers,statusCode,desc){
		headers = ..hpsocket.helper.headers(headers);
		statusCode = statusCode : 200;
		return !!::HPSocket.HP_HttpServer_SendResponse(this.pSocket,connId,statusCode,desc,headers.struct(),headers.length(),body,#body);
	}
	sendWsMessage = function(connId,data,opCode,final,bodyLen,reserved){
		if(final===null) final = true;
		if(opCode===null) opCode = 1;
		
		var len = #data;
		var pData = realloc(#data,,data);
		var r = !!::HPSocket.HP_HttpServer_SendWSMessage(this.pSocket,connId,final,reserved
			,opCode,,pData, len, ..math.size64(len + (bodyLen:0)) );
		realloc(0,pData);
		return r;
	};
	release = function(connId){
		return !!::HPSocket.HP_HttpServer_Release(this.pSocket,connId );
	};	
	setReleaseDelay = function(v){
		::HPSocket.HP_HttpServer_SetReleaseDelay(this.pSocket,v);
	}
	getReleaseDelay = function(){
		return ::HPSocket.HP_HttpServer_GetReleaseDelay(this.pSocket);
	} 
	getUrlFieldSet = function(connId){
		return 0xFFFF & ::HPSocket.HP_HttpServer_GetUrlFieldSet(this.pSocket,connId);
	} 
	getUrlField = function(connId,enField){
		var s = ::HPSocket.HP_HttpServer_GetUrlField(this.pSocket,connId,enField);
		if(s) return ..raw.str((topointer(s)));
	}
	getRequestUri = function(connId){	
		var fileds = ::HPSocket.HP_HttpServer_GetUrlFieldSet(this.pSocket,connId);
		var uri = "/"
		if(fileds & (1<<3) ) uri  = owner.getUrlField(connId,3);
		if(fileds & (1<<4) ) uri  = uri + "?" + owner.getUrlField(connId,4);
		return uri;
	}
	getMethod = function(connId){
		var s = ::HPSocket.HP_HttpServer_GetMethod(this.pSocket,connId);
		if(s) return ..raw.str((topointer(s)));
	}
	getHost = function(connId){
		var s = ::HPSocket.HP_HttpServer_GetHost(this.pSocket,connId);
		if(s) return ..raw.str((topointer(s)));
	}
	getContentEncoding = function(connId){
		var s = ::HPSocket.HP_HttpServer_GetContentEncoding(this.pSocket,connId);
		if(s) return ..raw.str((topointer(s)));
	}
	getTransferEncoding = function(connId){
		var s = ::HPSocket.HP_HttpServer_GetTransferEncoding(this.pSocket,connId);
		if(s) return ..raw.str((topointer(s)));
	}
	getWsSecAccept = function(connId){
		var key = owner.getHeader(connId,"Sec-WebSocket-Key");	; 
		if(key) return wsHelper.getSecAccept(key); 
	}
	getWsSecProtocol = function(connId){
		var protocol = owner.getHeader(connId,"Sec-WebSocket-Protocol")
		if(protocol) return ..string.split(protocol,"<, >");
		return {};
	}
	sendSwitchingProtocols = function(connId,headers){
		return owner.sendResponse(connId,null,headers,101/*HSC_SWITCHING_PROTOCOLS*/,null)	
	}
	sendWsSwitchingProtocols = function(connId,headers,protocol){
		headers = ..hpsocket.helper.headers(headers);
		
		headers.mixin({
			["Connection"] = "Upgrade";
			["Upgrade"] = "websocket";
			["Sec-WebSocket-Accept"] = owner.getWsSecAccept(connId);
			["Sec-WebSocket-Protocol"] = protocol : owner.getWsSecProtocol(connId)[1];
		})
 
		return owner.sendResponse(connId,null,headers,101/*HSC_SWITCHING_PROTOCOLS*/,null)	
	}
	getContentType = function(connId){
		var s = ::HPSocket.HP_HttpServer_GetContentType(this.pSocket,connId);
		if(s) return ..raw.str((topointer(s)));
	}
	getContentLength = function(connId){
		return ::HPSocket.HP_HttpServer_GetContentLength(this.pSocket,connId);
	}
	setLocalVersion = function(v){
		::HPSocket.HP_HttpServer_SetLocalVersion(this.pSocket,v);
	}
	getLocalVersion = function(){
		return ::HPSocket.HP_HttpServer_GetLocalVersion(this.pSocket);
	}
	getVersion = function(){
		return 0xFFFF & ::HPSocket.HP_HttpServer_GetVersion(this.pSocket);
	}
	isKeepAlive = function(connId){
		return !! ::HPSocket.HP_HttpServer_IsKeepAlive(this.pSocket,connId);
	} 
	isUpgrade = function(connId){
		return !! ::HPSocket.HP_HttpServer_IsUpgrade(this.pSocket,connId);
	}
	getParseErrorCode = function(connId){
		var errdesc= {string value};
		var errno = 0xFFFF & ::HPSocket.HP_HttpServer_GetParseErrorCode(this.pSocket,connId,errdesc);
		return errno,errdesc.value;
	}
	getHeader = function(connId,name){
		var s = {string value};
		if(::HPSocket.HP_HttpServer_GetHeader(this.pSocket,connId,name,s))
			return s.value;
	}
	getHeaders = function(connId,name){
		var s = {string array[] = {INT length} };
		::HPSocket.HP_HttpServer_GetHeaders(this.pSocket,connId,null,s.array);
		if(::HPSocket.HP_HttpServer_GetHeaders(this.pSocket,connId,,name,s,s.array)) return s.array;
	}
	getAllHeaders = function(connId){
		var hdrs = ..hpsocket.helper.headers(); 
		::HPSocket.HP_HttpServer_GetAllHeaders(this.pSocket,connId,null,hdrs.array)
		if(::HPSocket.HP_HttpServer_GetAllHeaders(this.pSocket,connId,hdrs.struct(),hdrs.array)) return hdrs;
	}
	getAllHeaderNames = function(connId){
		var s = {string array[] = {INT length} };
		::HPSocket.HP_HttpServer_GetAllHeaderNames(this.pSocket,connId,null,s.array);
		if(::HPSocket.HP_HttpServer_GetAllHeaderNames(this.pSocket,connId,s,s.array)) return s.array;
	}
	getCookie = function(connId,name){
		var s = {string value};
		if(::HPSocket.HP_HttpServer_GetCookie(this.pSocket,connId,name,s))
			return s.value;
	}
	getAllCookies = function(connId){
		var s = {struct array[] = {{string name;string value};INT length} };
		::HPSocket.HP_HttpServer_GetAllCookies(this.pSocket,connId,null,s.array);
		if(::HPSocket.HP_HttpServer_GetAllCookies(this.pSocket,connId,s,s.array)) return s.array;
	}
	getUpgradeType = function(connId){
		return  ::HPSocket.HP_HttpServer_GetUpgradeType(this.pSocket,connId);
	}
	getWsMessageState = function(connId){
		var final = {bool value}
		var reserved = {BYTE value}
		var opCode = {BYTE value}
		var mask = {INT value}
		var bodyLen = {LONG value}
		var bodyRemain = {LONG value} 
		if( ::HPSocket.HP_HttpServer_GetWSMessageState(this.pSocket,connId,final,reserved
			,opCode,mask,bodyLen,bodyRemain ) ){
				return{
					final = final.value;
					reserved = reserved.value;
					opCode = opCode.value;
					mask = mask.value;
					bodyLen = bodyLen.value;
					bodyRemain = bodyRemain.value;
				}
			}
	};
	sendLocalFile = function(connId,filename,headers,statusCode,desc){
		headers = ..hpsocket.helper.headers(headers)
		return 	::HPSocket.HP_HttpServer_SendLocalFile(this.pSocket,connId,..io.fullpath(filename),statusCode:200,desc,headers,headers.length());
	}
}

namespace httpServer{
	wsHelper =  ..hpsocket.helper.websocket;
	realloc = ..raw.realloc;
}
