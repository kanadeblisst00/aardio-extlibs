import util.metaProperty;
namespace jsonquery;

var dllpath = DEBUG ? "\lib\jsonquery\.res\jsonquery.dll" : $"~\lib\jsonquery\.res\jsonquery.dll";
var dll = ..raw.loadDll(dllpath,,"cdecl");

class Node{
	ctor(nIndex, jsonSize){
		this.nIndex = nIndex;
		this.jsonSize = jsonSize;
		..table.gc(this, "release")
	}
	
	@_metaProperty;
}

namespace Node{
	ReleaseNode = dll.api("ReleaseNode", "void(int i)");	
    
    _metaProperty = ..util.metaProperty( 
    	release = function(){
			ReleaseNode(owner.nIndex)
		};
		
		ChildNodes = function(){
			var ChildNodes_Each = dll.api("ChildNodes_Each", "bool(int nIndex,POINTER callback)");
			var results = ..table.array();
			var Callback = function(i, nIndex2){
				..table.push(results, Node(nIndex2, node.jsonSize));
			}
			var cCallback = ..raw.tostdcall(Callback, "void(int i, int j)");
			var ret = ChildNodes_Each(node.nIndex, cCallback);
			return results;
		}
		
		OutputXML = function(){
			if(!owner.jsonSize) return;
			var OutputXMLFunc = dll.api("OutputXML", "bool(int i, string a)");
			var stringBuf = ..raw.buffer(owner.jsonSize*4);
			var exists = OutputXMLFunc(owner.nIndex,stringBuf);
			var s;
			if(exists) s = ..raw.str(stringBuf);
			return s;
		};
		
		InnerText = function(){
			if(!owner.jsonSize) return;
			var InnerTextFunc = dll.api("InnerText", "bool(int i, string a)");
			var stringBuf = ..raw.buffer(owner.jsonSize*4);
			var exists = InnerTextFunc(owner.nIndex,stringBuf);
			var s;
			if(exists) s = ..raw.str(stringBuf);
			return s;
		};
		
		SelectElement = function(name){
			var SelectElementFunc = dll.api("SelectElement", "int(int i, string b)");
			var nIndex2 = SelectElementFunc(owner.nIndex, name);
			if(nIndex2 == 0) return;
			var newNode = ..table.clone(owner);
			newNode.nIndex = nIndex2;
			return newNode;
		};
		
	)
	
}

libInfo = {
    "version": "1.0.0.1",
    "author": "kanadeblisst",
    "description": "jsonquery封装库，用于解析json"
}

Find = function(node, expr){
	var Find_Each = dll.api("Find_Each", "bool(int nIndex,string name,POINTER callback)");
	var results = ..table.array();
	var Callback = function(i, nIndex2){
		..table.push(results, Node(nIndex2, node.jsonSize));
	}
	var cCallback = ..raw.tostdcall(Callback, "void(int i, int j)");
	var ret = Find_Each(node.nIndex, expr, cCallback);
	return results;
}

FindOne = function(node, expr){
	var FindOneFunc = dll.api("FindOne", "int(int nIndex,string expr)");
	var nIndex2 = FindOneFunc(node.nIndex, expr);
	..console.log("nIndex2: ", nIndex2)
	if(nIndex2 == 0) return;
	return Node(nIndex2, node.jsonSize);
}

Parse = function(json){
	var ParseFunc = dll.api("Parse", "int(string a)");
	var nIndex = ParseFunc(json);
	if(nIndex == 0) return;
	return Node(nIndex, #json);
}

Query = function(node, expr){
	var QueryFunc = dll.api("Query", "bool(int i, string a)");
	var nIndex2 = QueryFunc(node.nIndex, expr);
	if(nIndex2 == 0) return;
	return Node(nIndex2, node.jsonSize);
}

QueryAll = function(node, expr){
	var QueryAll_Each = dll.api("QueryAll_Each", "bool(int nIndex,string name,POINTER callback)");
	var results = {};
	var Callback = function(i, nIndex2){
		..table.push(results, Node(nIndex2, node.jsonSize));
	}
	var cCallback = ..raw.tostdcall(Callback, "void(int i, int j)");
	var ret = QueryAll_Each(node.nIndex, expr, cCallback);
	return results;
}

/**details(入门教程)
该库封装自go语言的jsonquery模块,用xpath解析json,封装后的用法几乎和golang的用法一样

github地址: https://github.com/antchfx/jsonquery
end details**/

/**intellisense()
jsonquery.Find(.(node,xpath表达式) = 查找节点，返回节点列表
jsonquery.FindOne(.(node,xpath表达式) = 查找节点，返回第一个找到的节点
jsonquery.Parse(.(HTML) = 从字符串解析
jsonquery.Parse() = !nodeObj.
jsonquery.Query(.(node,xpath表达式) = 查找节点，返回第一个找到的节点
jsonquery.Query() = !nodeObj.
jsonquery.QueryAll(.(node,xpath表达式) = 查找节点，返回节点列表
!nodeObj.ChildNodes() = 获取所有子节点
!nodeObj.OutputXML() = 获取节点xml
!nodeObj.SelectElement() = ***
end intellisense**/