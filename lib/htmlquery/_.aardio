import util.metaProperty;
import console;

class htmlQuery{
	ctor(html){
		this.nIndexList = ..table.array();
		this.html = html;
		this.htmlSize = #html;
		..table.add_gc(this, "release")
	};
	
	ExistsAttr = function(node, name){
		return ExistsAttrFunc(node, name);
	};
	
	Find = function(node, expr){
		var nodeList = ..table.array();
		var nIndexList = this.nIndexList;
		var Callback = function(i, nIndex){
			..table.push(nIndexList, nIndex);
			..table.push(nodeList, nIndex);
		}
		var cCallback = ..raw.tostdcall(Callback, "void(int i, int j)");
		var ret = Find_Each(node, expr, cCallback);
		return nodeList;
	};
	
	FindOne = function(node, expr){
		var nIndex = FindOneFunc(node, expr);
		if(nIndex == 0) return;
		..table.push(this.nIndexList, nIndex);
		return nIndex;
	};
	
	InnerText = function(node){
		if(!this.htmlSize) return;
		var stringBuf = ..raw.buffer(this.htmlSize*4);
		var exists = InnerTextFunc(node, stringBuf);
		var s;
		if(exists) s = ..raw.str(stringBuf);
		return s;
	};
	
	LoadDoc = function(path){
		path = ..io.localpath(path) : path;
		if(!..io.exist(path)) return;
		this.html = ..string.load(path);
		this.htmlSize = #html;
		var nIndex = LoadDocFunc(path);
		if(nIndex == 0) return;
		..table.push(this.nIndexList, nIndex);
		return nIndex;
	};
	
	OutputHTML = function(node, b=true){
		if(!this.htmlSize) return;
		var stringBuf = ..raw.buffer(this.htmlSize*4);
		var exists = OutputHTMLFunc(node, b, stringBuf);
		var s;
		if(exists) s = ..raw.str(stringBuf);
		return s;
	};
	
	Parse = function(html){
		var nIndex = ParseFunc(html);
		if(nIndex == 0) return;
		this.html = html;
		this.htmlSize = #html;
		..table.push(this.nIndexList, nIndex);
		return nIndex;
	};
	
	Query = function(node, expr){
		var nIndex = QueryFunc(node, expr);
		if(nIndex == 0) return;
		..table.push(this.nIndexList, nIndex);
		return nIndex;
	};
	
	QueryAll = function(node, expr){
		var nodeList = ..table.array();
		var nIndexList = this.nIndexList;
		var Callback = function(i, nIndex){
			..table.push(nodeList, nIndex);
			..table.push(nIndexList, nIndex);
		}
		var cCallback = ..raw.tostdcall(Callback, "void(int i, int j)");
		var ret = QueryAll_Each(node, expr, cCallback);
		return nodeList;
	};
	
	SelectAttr = function(node, name){
		var stringBuf = ..raw.buffer(10240);
		var exists = SelectAttrFunc(node, name, stringBuf);
		var s;
		if(exists) s = ..raw.str(stringBuf);
		return s;
	};
	
	@_metaProperty;
}

namespace htmlQuery{
	/*
dll = ..raw.loadDll("\lib\htmlQuery\.res\htmlquery.dll",,"cdecl");
	
	ReleaseNode = dll.api("ReleaseNode", "void(int i)");
	SelectAttrFunc = dll.api("SelectAttr", "bool(int i, string b,string a)");
	QueryAll_Each = dll.api("QueryAll_Each", "bool(int nIndex,string name,POINTER callback)");
	ExistsAttrFunc = dll.api("ExistsAttr", "bool(int nIndex,string name)");
	Find_Each = dll.api("Find_Each", "bool(int nIndex,string name,POINTER callback)");
	FindOneFunc = dll.api("FindOne", "int(int nIndex,string expr)");
	QueryFunc = dll.api("Query", "int(int i, string a)");
	ParseFunc = dll.api("Parse", "int(string a)");
	OutputHTMLFunc = dll.api("OutputHTML", "bool(int i, bool b,string a)");
	InnerTextFunc = dll.api("InnerText", "bool(int i, string a)");
	LoadDocFunc = dll.api("LoadDoc", "int(string a)");
*/
	var path = ..io.localpath("\htmlquery.dll");
	var LoadLibraryW = ::Kernel32.api("LoadLibraryW","addr(ustring libName)");
	moduleAddr = LoadLibraryW(path);
	exportFuncOffset = {
    	"ExistsAttr":1472864,
    	"FindOne":1473056,
    	"Find_Each":1472960,
    	"InnerText":1473152,
    	"LoadDoc":1473248,
    	"OutputHTML":1473328,
    	"Parse":1473440,
    	"Query":1473520,
    	"QueryAll_Each":1473616,
    	"ReleaseNode":1472800,
    	"SelectAttr":1473712,
    	"_cgo_dummy_export":3481092
	};
	ReleaseNode = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["ReleaseNode"],"void(int i)");
	SelectAttrFunc = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["SelectAttr"],"bool(int i, string b,string a)");
	QueryAll_Each = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["QueryAll_Each"],"bool(int nIndex,string name,POINTER callback)");
	ExistsAttrFunc = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["ExistsAttr"],"bool(int nIndex,string name)");
	Find_Each = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["Find_Each"],"bool(int nIndex,string name,POINTER callback)");
	FindOneFunc = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["FindOne"],"int(int nIndex,string expr)");
	QueryFunc = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["Query"],"int(int i, string a)");
	ParseFunc = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["Parse"],"int(string a)");
	OutputHTMLFunc = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["OutputHTML"],"bool(int i, bool b,string a)");
	InnerTextFunc = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["InnerText"],"bool(int i, string a)");
	LoadDocFunc = ..raw.module("cdecl").api(moduleAddr+exportFuncOffset["LoadDoc"],"int(string a)");
	
	
	libInfo = {
    	"version": "1.0.1.0",
    	"author": "kanadeblisst",
    	"description": "htmlquery封装库，用于解析HTML"
	}
	
	_metaProperty = ..util.metaProperty( 
    	release = function(){
    	    var nodeList = owner.nIndexList;
    	    for(i=1;#nodeList;1){
    	        ReleaseNode(nodeList[i]);
    	    }
    	    owner.nIndexList = null;
		};
	)
}




/**details(入门教程)
该库封装自go语言的htmlquery模块,用xpath解析HTML,封装后的用法几乎和golang的用法一样

github地址: https://github.com/antchfx/htmlquery
end details**/

/**intellisense()
htmlQuery() = !htmlquery.
!htmlquery.ExistsAttr(.(node,属性名) = 判断属性是否存在
!htmlquery.Find(.(node,xpath表达式) = 查找节点，返回节点列表
!htmlquery.FindOne(.(node,xpath表达式) = 查找节点，返回第一个找到的节点
!htmlquery.InnerText(.(node) = 获取节点的文本内容
!htmlquery.LoadDoc(.(HTML所在路径) = 从文件加载HTML
!htmlquery.OutputHTML(.(node) = 获取节点的HTML文本
!htmlquery.Parse(.(HTML) = 从字符串解析
!htmlquery.Query(.(node,xpath表达式) = 查找节点，返回第一个找到的节点
!htmlquery.QueryAll(.(node,xpath表达式) = 查找节点，返回节点列表
!htmlquery.SelectAttr(.(node,name) = 获取属性的值
end intellisense**/

