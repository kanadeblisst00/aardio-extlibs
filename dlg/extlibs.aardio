//非官方扩展库
import fonts.fontAwesome;
import win.ui;
import ide;
import win.ui.atom;
import inet.downBox;
import process;
import zlib.unzip;
import fsys;
import console;
import win.debounce;
/*DSG{{*/
var winform = win.form(text="扩展库（kanadeblisst）";right=798;bottom=503;bgcolor=16777215;border="dialog frame")
winform.add(
btnCheckAll={cls="plus";text="全选";left=13;top=7;right=96;bottom=33;align="left";color=3355443;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-15;name='FontAwesome');padding={top=1}};iconText='\uF0C8 ';notify=1;textPadding={left=24};z=5};
btnSearch={cls="plus";left=757;top=7;right=787;bottom=33;align="left";border={bottom=1;color=-6908266};color=3947580;dr=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=8}};iconText='\uF002';notify=1;textPadding={left=25};z=6};
btnSetup={cls="button";text="安装/更新";left=446;top=444;right=772;bottom=500;bgcolor=16777215;color=14120960;db=1;dr=1;font=LOGFONT(h=-14);note="开发环境运行代码会自动安装缺少的扩展库";z=3};
editKeyword={cls="plus";left=519;top=7;right=757;bottom=33;align="right";border={bottom=1;color=-6908266};dr=1;dt=1;editable="edit";font=LOGFONT(h=-13);notify=1;textPadding={top=3;bottom=3};z=7};
lbInfo={cls="static";text='\u2514\u2500\u2500 鼠标双击上面扩展库名字查看范例。';left=12;top=444;right=787;bottom=467;color=3355443;db=1;dl=1;dr=1;transparent=1;z=1};
lbKeyword={cls="static";text="筛选：";left=302;top=15;right=515;bottom=36;align="right";color=3355443;dl=1;dr=1;dt=1;transparent=1;z=4};
listview={cls="listview";left=9;top=40;right=787;bottom=440;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;edge=1;fullRow=1;msel=false;z=2}
)
/*}}*/

var initListView = function(){
	winform.listview.setExtended(0x4/*_LVS_EX_CHECKBOXES*/); 
	winform.listview.insertColumn("扩展库",80);
	winform.listview.insertColumn("在线版本",65);
	winform.listview.insertColumn("本地版本",65);
	winform.listview.insertColumn("依赖",80);
	winform.listview.insertColumn("类型",50); 
	winform.listview.insertColumn("更新时间",70); 
	winform.listview.insertColumn("作者",80); 
	winform.listview.insertColumn("说明",-1);
}

var showLibs = function(libs){
    winform.listview.clear();
    winform.listview.redraw();
    
    var libs = libs : winform.libTables;
	if( libs ){ 
		var installedLibs = ide.getExtLibs(); 
		var data = { fields={"name","version","installedVersion","Dependency","pType","modifyTime","author","description"}}
		for(libName,libInfo in libs){
			var dependency =  type(libInfo.Dependency) == type.table ? string.join(libInfo.Dependency,",") : libInfo.Dependency;
			table.push(data,{ 
				name=libName;
				version=libInfo.version;
				installedVersion=installedLibs[libName][["version"]] : "未安装";
				dependency=dependency;
				pType = libInfo.pType:"模块";
				modifyTime=libInfo.lastModifyTime:tostring(time(0),"%Y-%m-%d");
				author=libInfo.author;
				description=libInfo.description;
				weight=libInfo.weight:0 ;
				checked=true;
			}) 
		}
		
		table.sort(data,function(next){
			if(owner.weight==next.weight)return owner.name < next.name;
			return  owner.weight>next.weight 
		})
	 
		winform.listview.setTable(data);
		for(i=1;#data;1){
			if( data[i].installedVersion!="未安装") winform.listview.setChecked(i,true); 
		}
		winform.text = "扩展库（kanadeblisst）";
	}
	else winform.text = "扩展库（kanadeblisst）";		
}

var requestLibInfo = function(libName){
	return ..thread.invokeAndWait(
		function(libName){
			import web.rest.jsonLiteClient;
			
			var url = "http://git.pygrower.cn/kanadeblisst/aardio-extlibs/raw/branch/master/dist/exlibs.json";
			var http = web.rest.jsonLiteClient(null, "");
			var libApi = http.api(url)
			var listLib = libApi.get();
			http.close();
			var lib ;
			if(libName){
				lib = listLib[libName];
				lib["libName"] = libName;
			}else{
				lib = listLib;
			}
			
			return lib;
		},libName
	) 
};

var getItemIndexByLibNames = function(libName){
	for(i=1;winform.listview.count;1){
		if(libName == winform.listview.getItemText(i, 1)){
			return i;
		}
	}
}

var installLib = function(libName, libInfo, installedLibs){
	var libInfo = libInfo : winform.libTables[libName];
	if(installedLibs[libName][["version"]] == libInfo.version) return false;
	var pType = libInfo.pType : "模块";
	if(!libInfo) return;
	if(pType != "模块") {
		process.execute(libInfo.url);
		return;
	}
	winform.text = "正在安装库:" + libName;
	
	ide.installLib( libName,libInfo.url,,true);
	winform.text = "已安装库:"  + libName;
	var itemIndex = getItemIndexByLibNames(libName);
	winform.listview.setChecked(itemIndex,true);
	winform.listview.setItemText(libInfo.version,itemIndex,3);
	
	installedLibs[libName] = { version = libInfo.version };
	string.save("~\extensions\extlibver.table", table.tostring(installedLibs) )
	
	return installedLibs;
}

var installLibs = function(libNames){
	var thisInstalledLibs = table.array();
	var installedLibs = ide.getExtLibs(); 
	for i, libName in libNames{
		var libInfo = winform.libTables[libName];
		var dependency = type(libInfo.Dependency) == type.string ? string.split(libInfo.Dependency,",") : libInfo.Dependency;
		if(dependency){
			for j,dependencyLibName in dependency{
				if(table.find(thisInstalledLibs,dependencyLibName)) continue;
				installedLibs = installLib(dependencyLibName, libInfo, installedLibs);
				table.push(thisInstalledLibs,dependencyLibName);
			}
		}
		if(table.find(thisInstalledLibs,libName)) continue;
		installedLibs = installLib(libName, libInfo, installedLibs);
		if(!installedLibs) installedLibs = ide.getExtLibs(); 
		table.push(thisInstalledLibs,libName);
	}
}

var openSample = function(libName, zipUrl, pType){
	if(!zipUrl) zipUrl = winform.libTables[libName].sampleZipUrl;
	if(!zipUrl) return;
	if(pType != "模块"){
		..process.execute(zipUrl);
		return;
	}
	var path = "/.KanadeBlisstSampleCode/";
	fsys.createDir(path );
	var codePath = path + libName + ".zip";
	var downBox = inet.downBox(winform,path + libName,true )

	if( downBox.download(zipUrl , codePath ) ){
	 	var ok,err = zlib.unzip.extract(codePath, path + libName); 
	 	..process.explore(path + libName);
	} 
}

var SearchFunc = function(id,event){
    var k = winform.editKeyword.text;
    if(#k) k = string.trim(k);
    
    if(!#k){
    	showLibs();
    	return;
    }
    
    var libs = winform.libTables; 
    if(type(libs)!="table" || !table.next(libs)){
    	showLibs();
    	winform.text = "无法连接服务器，请检查网络故障或稍后重试！"
    	return;
    }
    
    keywords = string.splitEx(string.lower(k),"\s+");
    
    var result = {}
    for(name,libInfo in libs){ 
    	
    	for(i,k in keywords){
    		if(string.indexOf(string.lower(name),k)) {
    			result[name] = libInfo;
    			continue;
    		}
    	
    		if(libInfo.keywords){
    			if(string.indexOf(string.lower(libInfo.keywords),k)) {
    				result[name] = libInfo;
    				continue;
    			}
    		}
    		
    		if(libInfo.description){
    			if(string.indexOf(string.lower(libInfo.description),k)) {
    				result[name] = libInfo;
    				continue;
    			}
    		}
    		
    		if(libInfo.author){
    			if(string.indexOf(libInfo.author,k)) {
    				result[name] = libInfo;
    				continue;
    			}
    		}
    		
    		if(string.indexOf(name,k)) {
    			result[name] = libInfo;
    			continue;
    		}
    	} 
    };
    
	showLibs( result );
}

var main = function(){
	var atom,hwnd = winform.atom("aardio.extlib.F4700CFB-B4ED-4637-8F19-C76B3B8DC7F9");
	if(!atom){ 
		win.showForeground(hwnd);
		win.quitMessage();	
		return;
	} 
	winform.libTables = {};
	initListView();
	winform.show();
	winform.text = "正在获取服务器列表....";
	ide.requestLibInfo = requestLibInfo;
	var libs = requestLibInfo(); 
	
	for k,v in libs{
		winform.libTables[k] = v;
	}
	
	if(type(libs)!="table" || !table.next(libs)){
    	showLibs();
    	winform.text = "aardio 扩展库 — 无法连接服务器，请检查网络故障或稍后重试！"
	}
	else {
		showLibs( libs );
	}
}

main();

winform.btnSetup.oncommand = function(id,event){
	winform.btnSetup.disabled = true;
	
	var libNames = table.array();
	for(i=winform.listview.count;1;-1){
		if( winform.listview.getChecked(i) ){
			var libName = winform.listview.getItemText(i,1) ;
			table.push(libNames, libName);
		}
	} 
	installLibs(libNames);
	winform.text = "aardio 扩展库 - 安装已完成" ;
	ide.refreshStdLib();
	winform.btnSetup.disabled = false;
}

winform.listview.onnotify = function(id,code,ptr){

    select(code) { 
        case 0xFFFFFFFB/*_NM_RCLICK*/  {
			
			var x,y = win.getCursorPos();
			winform.popmenu = win.ui.popmenu(winform);
			
		 	var itemIndex,libName = winform.listview.getSelection(,1)
			winform.popmenu.add("安装 / 更新",function(id){ 
				winform.text = "扩展库（kanadeblisst）";
				installLibs({libName});
			});	 
		 	winform.popmenu.add("查看范例",function(id){ 
				 if(libName) openSample(libName);
			});	 
	
			winform.popmenu.popup(x,y,true);
		}
    	case 0xFFFFFFFD/*_NM_DBLCLK*/ {
    		var nm = winform.listview.getNotifyMessage(code,ptr)
    		if(winform.listview.selIndex){
        		var libName = winform.listview.getItemText(nm.iItem,1)
        		if(libName) openSample(libName);
        	}
    	}
    }
}


winform.onOk = function(){
    winform.listview.clear();
    win.debounce(SearchFunc)();
}

winform.editKeyword.editBox.onChange = function(){ 
	if(owner.onModified)owner.onModified(true);
	win.debounce(SearchFunc)();
}

winform.editKeyword.setFocus();

winform.btnCheckAll.checked = true;
winform.btnCheckAll.oncommand = function(id,event){
	var checked = owner.checked;
	for(i=winform.listview.count;1;-1){
		winform.listview.setChecked(i,checked) 
	} 
}

winform.btnSearch.skin({
	color={
		active=0xFF00FF00;
		default=0xFF3C3C3C;
		disabled=0xFF6D6D6D;
		hover=0xFFFF0000
	}
})

winform.btnCheckAll.skin({
	color={
		active=0xFF00FF00;
		default=0xFF000000;
		disabled=0xEE666666;
		hover=0xFFFF0000
	};
	checked={
		iconText='\uF14A'
	}
})


win.showForeground(winform.hwnd); 
win.loopMessage();